#!/usr/bin/env bash

# Abort on any error
set -e

usage() {
  cat <<EOF
Usage: $(basename $0) DHOME

  Create a release tarball and zip archive of a disassembly. DHOME is the
  disassembly home directory.
EOF
  exit 1
}

readme() {
  [[ -z $DECCONFIG ]] || decopts="$DECCONFIG "
  cat <<EOF
The HTML disassemblies in this archive were built from the source files in the
'sources' subdirectory using version $SK_VERSION of SkoolKit.

SkoolKit can be obtained from the following locations:

  https://skoolkit.ca/skoolkit/
  https://github.com/skoolkid/skoolkit/releases/

An HTML disassembly can be built from the source files by following these
steps:

1. Download and unpack SkoolKit $SK_VERSION.

2. Copy every file from the 'sources' subdirectory in this archive to the
   directory where SkoolKit was unpacked.

3. Change to the directory where SkoolKit was unpacked and run this command to
   build the decimal version of the disassembly:

   $ ./skool2html.py $decopts$GAME.skool

   To build the hexadecimal version of the disassembly, run this command:

   $ ./skool2html.py ${HEXCONFIG:--H} $GAME.skool
EOF
}

asm_header() {
  [[ -z $SKOOL2BINOPTS ]] || skool2binopts="$SKOOL2BINOPTS "
  [[ -z $BIN2SNAOPTS ]] || bin2snaopts="$BIN2SNAOPTS "
  [[ -z $BIN2TAPOPTS ]] || bin2tapopts="$BIN2TAPOPTS "
  cat <<EOF
An ASM version of the disassembly in this archive can be built from the source
files in the 'sources' subdirectory using version $SK_VERSION of SkoolKit.

SkoolKit can be obtained from the following locations:

  https://skoolkit.ca/skoolkit/
  https://github.com/skoolkid/skoolkit/releases/

The ASM disassembly can be built by following these steps:

1. Download and unpack SkoolKit $SK_VERSION.

2. Copy every file from the 'sources' subdirectory in this archive to the
   directory where SkoolKit was unpacked.

3. Change to the directory where SkoolKit was unpacked and run this command:

  $ ./skool2asm.py $GAME.skool > $GAME.asm

Now $GAME.asm can be assembled using pasmo (http://pasmo.speccy.org/):

  $ pasmo $GAME.asm $GAME.bin

Alternatively, $GAME.skool can be converted to a binary file by the skool2bin.py
utility, included with SkoolKit:

  $ ./skool2bin.py $skool2binopts$GAME.skool
EOF

[[ $GAME == rom ]] || cat <<EOF

To create a Z80 snapshot from $GAME.bin, use the bin2sna.py utility, included
with SkoolKit:

  $ ./bin2sna.py $bin2snaopts$GAME.bin

The resultant snapshot, $GAME.z80, can be loaded into an emulator, and the game
will start automatically.

To create a TAP file from $GAME.bin, use the bin2tap.py utility, included with
SkoolKit:

  $ ./bin2tap.py $bin2tapopts$GAME.bin

The resultant TAP file, $GAME.tap, can be loaded into an emulator, and the game
will start automatically.
EOF
}

if (($# < 1)); then
  usage
fi

DHOME=$1
if [[ ! -d $DHOME ]]; then
  echo "Error: directory not found: $DHOME"
  exit 1
fi

DRELEASERC=$DHOME/.dreleaserc
if [[ ! -f $DRELEASERC ]]; then
  echo "Error: file not found: $DRELEASERC"
  exit 1
fi

. $DRELEASERC

# Determine the SkoolKit version number
if [[ ! -f skool2html.py ]]; then
  echo "Error: skool2html.py not found."
  exit 1
fi
SK_VERSION=$(./skool2html.py -V 2>&1 | cut -f2 -d' ')

# Determine the disassembly version number
VERSION=$(grep ^Release= $DHOME/sources/$GAME.ref | awk '{print $NF}' || true)
if [[ -z $VERSION ]]; then
  echo "Error: could not find version number in $GAME.ref"
  exit 1
fi

# Copy all files required to build the disassembly into the 'src' directory
rm -rf src
mkdir src
cp -p $DHOME/sources/*.skool src
cp -p $DHOME/sources/*.ref src
find $DHOME/sources \( -name '*.js' -o -name '*.css' -o -name '*.py' \) -exec cp -p {} src \;

DISTDIR=dist
PKGNAME=$GAME-disassembly-$VERSION
ABSDIR=${DISTDIR}/${PKGNAME}
rm -rf $ABSDIR

# Build the HTML disassembly
ARGS="-qj style.css -c Config/InitModule=$SKOOLKIT_HOME/tools:publish src/$GAME.skool $SKOOLKIT_HOME/tools/publish.ref"
DECARGS="$DECCONFIG -d ${ABSDIR} -c Config/GameDir=html --var pub=1 $ARGS"
HEXARGS="${HEXCONFIG:--H} -d ${ABSDIR}/html -c Config/GameDir=hex -T dark --var pub=3 $ARGS"
echo -n "Writing decimal disassembly..."
./skool2html.py $DECARGS
echo "done"
echo -n "Writing hexadecimal disassembly..."
./skool2html.py $HEXARGS
echo "done"
if [[ -n $WAVCONVERT ]]; then
  echo -n "Converting WAV files..."
  for wav in $WAVCONVERT; do
    oggenc -Q "${ABSDIR}/html/audio/$wav"
    rm "${ABSDIR}/html/audio/$wav"
  done
  echo "done"
  echo -n "Rewriting decimal disassembly..."
  ./skool2html.py $DECARGS
  echo "done"
  echo -n "Rewriting hexadecimal disassembly..."
  ./skool2html.py $HEXARGS
  echo "done"
fi

# Copy source files
echo -n "Copying source files..."
rm -rf src/__pycache__
cp -a src ${ABSDIR}/sources
find $DHOME/sources -name COPYING -exec cp -p {} $ABSDIR/sources \;
readme > ${ABSDIR}/readme.txt
asm_header > ${ABSDIR}/asm.txt
echo "done"

cd $DISTDIR

echo "Creating ${DISTDIR}/${PKGNAME}.tar.xz"
rm -f ${PKGNAME}.tar.xz
tar cf ${PKGNAME}.tar $PKGNAME
xz -9 ${PKGNAME}.tar

echo "Creating ${DISTDIR}/${PKGNAME}.zip"
rm -f ${PKGNAME}.zip
zip -9qr ${PKGNAME}.zip $PKGNAME
