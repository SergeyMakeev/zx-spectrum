    DEVICE ZXSPECTRUM48
    SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION

stack_top: EQU 0xFFF0

    ORG 0x6000

Code_Start: EQU 0x8000
    ORG Code_Start

Main:

    CALL PreScrollLogoSprite
    CALL ClearScreen

    ; Interrupt mode 2
    LD HL,Interrupt
    LD IX,0xFFF0
    LD (IX+04h),0xC3           		 ; Opcode for JP
    LD (IX+05h),L
    LD (IX+06h),H
    LD (IX+0Fh),0x18           		 ; Opcode for JR; this will do JR to FFF4h
    LD A,0x39
    LD I,A
    LD SP,0xFFF0
    IM 2
    EI

Loop:
    HALT
    JR Loop

Interrupt:
    DI                                      ; Disable interrupts 
    PUSH AF                                 ; Save all the registers on the stack
    PUSH BC                                 ; This is probably not necessary unless
    PUSH DE                                 ; we're looking at returning cleanly
    PUSH HL                                 ; back to BASIC at some point
    PUSH IX
    EXX
    EX AF,AF'
    PUSH AF
    PUSH BC
    PUSH DE
    PUSH HL
    PUSH IY

    LD A, 2         ; set border color 
    OUT (254), A

    CALL DrawLogo

    LD A, 1         ; set border color
    OUT (254), A

    POP IY                                  ; Restore all the registers
    POP HL
    POP DE
    POP BC
    POP AF
    EXX
    EX AF,AF'
    POP IX
    POP HL
    POP DE
    POP BC
    POP AF
    EI                                      ; Enable interrupts
    RET                                     ; And return

ClearScreen:
    XOR  A 

    ; clear border
    OUT  (0xFE),A             

    ; clear pixels
    LD   HL, 0x4000
    LD   DE, 0x4001
    LD   BC, 0x17ff
    LD   (HL),A
    LDIR   


    ;clear attrs (in thirds)
    LD A, 4                  ; green
    LD   HL, 0x5800
    LD   DE, 0x5801
    LD   BC, 0xff
    LD   (HL),A
    LDIR   

    LD A, 1                  ; blue
    LD   HL, 0x5900
    LD   DE, 0x5901
    LD   BC, 0xff
    LD   (HL),A
    LDIR   

    LD A, 6                  ; yellow
    LD   HL, 0x5A00
    LD   DE, 0x5A01
    LD   BC, 0xff
    LD   (HL),A
    LDIR   

    RET

;=============================================================
; HL = src
; DE = dst
; BC = counter (NOTE!!! BC<=255)

CopyPreScrollLine:
    ; copy bytes
    PUSH BC
    PUSH DE
    LDIR   

    POP HL
    POP BC
    ADD HL, BC
    DEC HL
    LD B, C
    LD C, 0
    ;HL = end address

    ; scroll bits
    OR A        ; reset CF flag
.Loop   
    RL (HL)
    DEC HL
    DJNZ .Loop    
    RET

; HL = source address
; DE = destination address
PreScrollLogoSingleSprite:
    LD B, 48  ; 48 lines height
.VertLoop
    PUSH BC
    LD BC, 14
    PUSH HL
    PUSH DE
    PUSH BC
    CALL CopyPreScrollLine
    POP BC
    POP DE
    POP HL
    ADD HL, BC
    ADD DE, BC
    POP BC
    DJNZ .VertLoop
    RET


PreScrollLogoSprite:
    LD HL, LogoData+768*0
    LD DE, LogoData+768*1
    CALL PreScrollLogoSingleSprite

    LD HL, LogoData+768*1
    LD DE, LogoData+768*2
    CALL PreScrollLogoSingleSprite

    LD HL, LogoData+768*2
    LD DE, LogoData+768*3
    CALL PreScrollLogoSingleSprite

    LD HL, LogoData+768*3
    LD DE, LogoData+768*4
    CALL PreScrollLogoSingleSprite

    LD HL, LogoData+768*4
    LD DE, LogoData+768*5
    CALL PreScrollLogoSingleSprite

    LD HL, LogoData+768*5
    LD DE, LogoData+768*6
    CALL PreScrollLogoSingleSprite

    LD HL, LogoData+768*6
    LD DE, LogoData+768*7
    CALL PreScrollLogoSingleSprite

    RET



DrawLogo:

.AnimFrame: LD A, 65                  ; 'animation' frame (64..1)
    DEC A                             ; decrease anim frame
    JP NZ, .NoNeedToResetAnim
    LD A, 64                          ; reset animation

.NoNeedToResetAnim:
    LD (.AnimFrame+1), A              ; update animation frame
    DEC A                             ; 1..64 -> 0..63
    
    OR A                              ; reset CF flag
    RRA                               ; div 2 = 0..63 -> 0..31

    LD HL, SpriteTable0               
    ADD A, H                          ; take animation frame into account
    LD H, A


    LD (.SaveSP+1), SP ; save SP

    ; IX = pointer to sprite render table
    LD IX, HL

    DUP 48
    LD L, (IX+0)      ; load src screen addr from memory
    LD H, (IX+1)      ;     one byte at a time
    LD SP, HL         ; move stack pointer to that screen memory

    ; step to then next table entry
    INC IX
    INC IX

    POP AF            ; read 2 bytes (16 pixels)
    POP BC            ; read 2 bytes (16 pixels)
    POP DE            ; read 2 bytes (16 pixels)
    POP HL            ; read 2 bytes (16 pixels)
    POP IY            ; read 2 bytes (16 pixels)     
    EXX               ; switch to shadow registers BC, DE, HL (note: we can not use HL)
    POP BC            ; read 2 bytes (16 pixels)
    POP DE            ; read 2 bytes (16 pixels)
    ;POP HL           ; we need that HL!!! (see below)
    LD L, (IX+0)      ; load dst screen addr from memory
    LD H, (IX+1)      ;     one byte at a time
    LD SP, HL         ; move stack pointer to that screen memory
    ;PUSH HL          ; we need that HL!!! (see above)
    PUSH DE           ; write 2 bytes
    PUSH BC           ; write 2 bytes
    EXX
    PUSH IY           ; write 2 bytes
    PUSH HL           ; write 2 bytes
    PUSH DE           ; write 2 bytes
    PUSH BC           ; write 2 bytes
    PUSH AF           ; write 2 bytes

    ; step to then next table entry
    INC IX
    INC IX
    EDUP

.SaveSP LD SP, 0 ; restore SP
    RET



    ; format: from addr, to addr (per line)
; _SpriteTable0:
;     DW LogoData+14* 0, 0x4036, LogoData+14* 1, 0x4136, LogoData+14* 2, 0x4236, LogoData+14* 3, 0x4336, LogoData+14* 4, 0x4436, LogoData+14* 5, 0x4536, LogoData+14* 6, 0x4636, LogoData+14* 7, 0x4736
;     DW LogoData+14* 8, 0x4056, LogoData+14* 9, 0x4156, LogoData+14*10, 0x4256, LogoData+14*11, 0x4356, LogoData+14*12, 0x4456, LogoData+14*13, 0x4556, LogoData+14*14, 0x4656, LogoData+14*15, 0x4756
;     DW LogoData+14*16, 0x4076, LogoData+14*17, 0x4176, LogoData+14*18, 0x4276, LogoData+14*19, 0x4376, LogoData+14*20, 0x4476, LogoData+14*21, 0x4576, LogoData+14*22, 0x4676, LogoData+14*23, 0x4776
;     DW LogoData+14*24, 0x4096, LogoData+14*25, 0x4196, LogoData+14*26, 0x4296, LogoData+14*27, 0x4396, LogoData+14*28, 0x4496, LogoData+14*29, 0x4596, LogoData+14*30, 0x4696, LogoData+14*31, 0x4796
;     DW LogoData+14*32, 0x40b6, LogoData+14*33, 0x41b6, LogoData+14*34, 0x42b6, LogoData+14*35, 0x43b6, LogoData+14*36, 0x44b6, LogoData+14*37, 0x45b6, LogoData+14*38, 0x46b6, LogoData+14*39, 0x47b6
;     DW LogoData+14*40, 0x40d6, LogoData+14*41, 0x41d6, LogoData+14*42, 0x42d6, LogoData+14*43, 0x43d6, LogoData+14*44, 0x44d6, LogoData+14*45, 0x45d6, LogoData+14*46, 0x46d6, LogoData+14*47, 0x47d6

    LUA ALLPASS
        function generate_table_for_anim_frame(frame_index)

            local spriteBankAddr = _c("LogoData")
            local spriteBankStride = 768
            for line = 0, 47 do


                local k = (frame_index / 31.0)               -- to 0..1 range
                k = (k * 2.0) - 1.0                          -- -1..1 range
                k = k * math.pi                              -- -pi..pi range
                k = k + (line * 0.04)
                local cos_val = math.cos(k)                  -- -1..1
                local x_offset = math.floor(cos_val * 8)     -- amplitude & round to integer



                local _x = 74+x_offset + 14*8         -- 14*8 since we need to specify the right coord
                local y = 14 + line

                -- compute speccy screen address from x,y

                -- clamp
                if _x < 0 then _x = 0 end
                if _x >= 256 then _x = 255 end
                if y < 0 then y = 0 end
                if y >= 192 then y = 191 end

                -- compute screen address
                local xx0 = math.floor(_x/8)             -- char pos 0..31
                local xx1 = _x - (xx0 * 8)               -- pixel offset 0..7
                local spriteBankIndex = 0
                if xx1 > 0 then
                    xx0 = xx0 + 1
                    spriteBankIndex = 8 - xx1
                end

                local x = xx0 & 31
                local y_b012 = y & 7
                local y_b345 = (y & 56) >> 3
                local y_b67 = (y & 192) >> 6
                local l = x | (y_b345 << 5)
                local h = 64 | y_b012 | (y_b67 << 3)
                local screen_addr = (h << 8) | l
                local sprite_addr = spriteBankAddr + (spriteBankIndex * spriteBankStride) + (14 * line)
                _pc(string.format("DW 0x%04x, 0x%04x  ; %sx%s (%s, %s, %s, %s)", sprite_addr, screen_addr, x, y, _x, xx0, xx1, spriteBankIndex))

            end
        end
    ENDLUA


    LUA ALLPASS
        for anim_frame = 0, 31 do
            _pl("    ALIGN 256")
            _pl(string.format("SpriteTable%d", anim_frame))
            generate_table_for_anim_frame(anim_frame)
        end
    ENDLUA


    ALIGN 256

LogoData:
    include "logo.z80"
; the logo size is 672 bytes (14*6 'characters' and every 'character' is 8 pixels height = 14*6*8 = 672 bytes)
; 672 aligned to 256 = 768 bytes
; 8 (pre)scrolled logos = 768 * 8 = 6144 bytes
; LogoData+6144 = end of logo data

Code_Length: EQU $-Code_Start+1

    SAVESNA "logofx/logofx.sna", Code_Start
