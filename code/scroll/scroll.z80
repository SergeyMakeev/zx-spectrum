; The Z80 supports three interrupt modes:
; IM 0: Executes an instruction that is placed on the data bus by a peripheral.
; IM 1: Jumps to address &0038
; IM 2: Uses an interrupt vector table, indexed by value on data bus.
; http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/interrupts
;
;http://z80-heaven.wikidot.com/instructions-set
;https://learn.cemetech.net/index.php/Z80:Opcodes
;
    DEVICE ZXSPECTRUM48
    SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION

stack_top: EQU 0xFFF0

Code_Start: EQU 0x8000
    ORG Code_Start

Main:

    LD A, 2         ; set border color to red(2)
    OUT (254), A

    CALL ResetText

    ; Interrupt mode 2
    LD HL,Interrupt
    LD IX,0xFFF0
    LD (IX+04h),0xC3           		 ; Opcode for JP
    LD (IX+05h),L
    LD (IX+06h),H
    LD (IX+0Fh),0x18           		 ; Opcode for JR; this will do JR to FFF4h
    LD A,0x39
    LD I,A
    LD SP,0xFFF0
    IM 2
    EI

Loop:
    HALT
    JR Loop

Interrupt:
    DI                                      ; Disable interrupts 
    PUSH AF                                 ; Save all the registers on the stack
    PUSH BC                                 ; This is probably not necessary unless
    PUSH DE                                 ; we're looking at returning cleanly
    PUSH HL                                 ; back to BASIC at some point
    PUSH IX
    EXX
    EX AF,AF'
    PUSH AF
    PUSH BC
    PUSH DE
    PUSH HL
    PUSH IY

    LD A, 0         ; set border color to (2)
    OUT (254), A

    CALL PrintLetterIfNeed
    CALL Scroll

    LD A, 2         ; set border color to red(2)
    OUT (254), A


    POP IY                                  ; Restore all the registers
    POP HL
    POP DE
    POP BC
    POP AF
    EXX
    EX AF,AF'
    POP IX
    POP HL
    POP DE
    POP BC
    POP AF
    EI                                      ; Enable interrupts
    RET                                     ; And return


    ;--------------
Scroll:
    ;  0x4000
    ;  256x192 pixels (32x24 chars)
    ;  

    ; line 0
    OR A                 ; reset CF flag
    LD HL, CharBuffer
    RL (HL)              ; CF <- [byte] <- CF
    LD HL, 0x401f   ; 0x1f = 31
    DUP 32               ; duplicate 32 times
    RL (HL)              ; CF <- [byte] <- CF
    DEC HL
    EDUP

    ; line 1
    OR A                 ; reset CF flag
    LD HL, CharBuffer+1
    RL (HL)              ; CF <- [byte] <- CF
    LD HL, 0x401f+0x0100
    DUP 32               ; duplicate 32 times
    RL (HL)              ; CF <- [byte] <- CF
    DEC HL
    EDUP

    ; line 2
    OR A                 ; reset CF flag
    LD HL, CharBuffer+2
    RL (HL)              ; CF <- [byte] <- CF
    LD HL, 0x401f+0x0100+0x0100
    DUP 32               ; duplicate 32 times
    RL (HL)              ; CF <- [byte] <- CF
    DEC HL
    EDUP

    ; line 3
    
    OR A                 ; reset CF flag
    LD HL, CharBuffer+3
    RL (HL)              ; CF <- [byte] <- CF
    LD HL, 0x401f+0x0100+0x0100+0x0100
    DUP 32               ; duplicate 32 times
    RL (HL)              ; CF <- [byte] <- CF
    DEC HL
    EDUP

    ; line 4
    
    OR A                 ; reset CF flag
    LD HL, CharBuffer+4
    RL (HL)              ; CF <- [byte] <- CF
    LD HL, 0x401f+0x0100+0x0100+0x0100+0x0100
    DUP 32               ; duplicate 32 times
    RL (HL)              ; CF <- [byte] <- CF
    DEC HL
    EDUP

    ; line 5
    
    OR A                 ; reset CF flag
    LD HL, CharBuffer+5
    RL (HL)              ; CF <- [byte] <- CF
    LD HL, 0x401f+0x0100+0x0100+0x0100+0x0100+0x0100
    DUP 32               ; duplicate 32 times
    RL (HL)              ; CF <- [byte] <- CF
    DEC HL
    EDUP

    ; line 6
    
    OR A                 ; reset CF flag
    LD HL, CharBuffer+6
    RL (HL)              ; CF <- [byte] <- CF
    LD HL, 0x401f+0x0100+0x0100+0x0100+0x0100+0x0100+0x0100
    DUP 32               ; duplicate 32 times
    RL (HL)              ; CF <- [byte] <- CF
    DEC HL
    EDUP

    ; line 7
    
    OR A                 ; reset CF flag
    LD HL, CharBuffer+7
    RL (HL)              ; CF <- [byte] <- CF
    LD HL, 0x401f+0x0100+0x0100+0x0100+0x0100+0x0100+0x0100+0x0100
    DUP 32               ; duplicate 32 times
    RL (HL)              ; CF <- [byte] <- CF
    DEC HL
    EDUP
   
    RET

PrintLetterIfNeed:
    LD A, (Counter)
    DEC A
    JR NZ,PrintLetterExit
    LD A, 8
    LD (Counter), A

    ; print 8 pixels
    ;LD A, 0xaa   ;0x55
    ;LD (CharBuffer), A

;;;;;
	LD BC, (TextReadAddr)       ; fetch + incerase current character address
	LD A, (BC)                  ; fetch character
    INC BC
    LD (TextReadAddr), BC

	OR A
	JR Z, ResetText             ; reset scroller if character is zero (loop)

	LD H, 0                    ; ld hl, a
	LD L, A
    
    ; sub hl, 32
    LD DE, 0xffe0              ; -32
    ADD HL, DE

	ADD HL, HL                 ; hl2 = hl + hl
	ADD HL, HL                 ; hl4 = hl2 + hl2
	ADD HL, HL                 ; hl8 = hl8 + hl8
	
	LD DE, Font                ; start of font
	ADD HL, DE                 ; HL = a specific letter
	LD DE, CharBuffer
	LD BC, 8
	LDIR
        
    RET

PrintLetterExit:
    LD (Counter), A
    RET
ResetText:
    LD HL, Text
    LD (TextReadAddr), HL
    RET



TextReadAddr:
    DB 0, 0

Counter:
    DB 8

CharBuffer:
    DB 0, 0, 0, 0, 0, 0, 0, 0

    ;--------------

Text:
    DB "HELLO! HOLA! SERGEY MAKEEV IS PROUD TO PRESENT A TRIBUTE TO ZX SPECTRUM MACHINE!   SPECCY RULEZ 4EVER! THAT ALL FOLKS! "
    DB "THANK YOU FOR WATCHING!!!                    # # # #               "
	DB 0


    include "font.z80"



Code_Length: EQU $-Code_Start+1

    SAVESNA "scroll/scroll.sna", Code_Start
