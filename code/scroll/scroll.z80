; The Z80 supports three interrupt modes:
; IM 0: Executes an instruction that is placed on the data bus by a peripheral.
; IM 1: Jumps to address &0038
; IM 2: Uses an interrupt vector table, indexed by value on data bus.
; http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/interrupts
;
;http://z80-heaven.wikidot.com/instructions-set
;https://learn.cemetech.net/index.php/Z80:Opcodes
;
    DEVICE ZXSPECTRUM48
    SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION

stack_top: EQU 0xFFF0

Code_Start: EQU 0x8000
    ORG Code_Start

Main:

    LD A, 2         ; set border color to red(2)
    OUT (254), A

    CALL PrintText

    ; Interrupt mode 2
    LD HL,Interrupt
    LD IX,0xFFF0
    LD (IX+04h),0xC3           		 ; Opcode for JP
    LD (IX+05h),L
    LD (IX+06h),H
    LD (IX+0Fh),0x18           		 ; Opcode for JR; this will do JR to FFF4h
    LD A,0x39
    LD I,A
    LD SP,0xFFF0
    IM 2
    EI

Loop:
    HALT
    JR Loop

Interrupt:
    DI                                      ; Disable interrupts 
    PUSH AF                                 ; Save all the registers on the stack
    PUSH BC                                 ; This is probably not necessary unless
    PUSH DE                                 ; we're looking at returning cleanly
    PUSH HL                                 ; back to BASIC at some point
    PUSH IX
    EXX
    EX AF,AF'
    PUSH AF
    PUSH BC
    PUSH DE
    PUSH HL
    PUSH IY

    LD A, 0         ; set border color to (2)
    OUT (254), A


    CALL Scroll

    LD A, 2         ; set border color to red(2)
    OUT (254), A


    POP IY                                  ; Restore all the registers
    POP HL
    POP DE
    POP BC
    POP AF
    EXX
    EX AF,AF'
    POP IX
    POP HL
    POP DE
    POP BC
    POP AF
    EI                                      ; Enable interrupts
    RET                                     ; And return


    ;--------------
Scroll:

    LD HL, 0x401f
    PUSH HL

    ; line 0
    OR A                 ; reset CF flag
    DUP 32               ; duplicate 32 times
    RL (HL)              ; CF <- [byte] <- CF
    DEC HL
    EDUP

    ; line 1
    POP HL
    INC H ; next line
    PUSH HL
    
    OR A                 ; reset CF flag
    DUP 32               ; duplicate 32 times
    RL (HL)              ; CF <- [byte] <- CF
    DEC HL
    EDUP

    ; line 2
    POP HL
    INC H ; next line
    PUSH HL
    
    OR A                 ; reset CF flag
    DUP 32               ; duplicate 32 times
    RL (HL)              ; CF <- [byte] <- CF
    DEC HL
    EDUP

    ; line 3
    POP HL
    INC H ; next line
    PUSH HL
    
    OR A                 ; reset CF flag
    DUP 32               ; duplicate 32 times
    RL (HL)              ; CF <- [byte] <- CF
    DEC HL
    EDUP

    ; line 4
    POP HL
    INC H ; next line
    PUSH HL
    
    OR A                 ; reset CF flag
    DUP 32               ; duplicate 32 times
    RL (HL)              ; CF <- [byte] <- CF
    DEC HL
    EDUP

    ; line 5
    POP HL
    INC H ; next line
    PUSH HL
    
    OR A                 ; reset CF flag
    DUP 32               ; duplicate 32 times
    RL (HL)              ; CF <- [byte] <- CF
    DEC HL
    EDUP

    ; line 6
    POP HL
    INC H ; next line
    PUSH HL
    
    OR A                 ; reset CF flag
    DUP 32               ; duplicate 32 times
    RL (HL)              ; CF <- [byte] <- CF
    DEC HL
    EDUP

    ; line 7
    POP HL
    INC H ; next line
    ;PUSH HL
    
    OR A                 ; reset CF flag
    DUP 32               ; duplicate 32 times
    RL (HL)              ; CF <- [byte] <- CF
    DEC HL
    EDUP

   
    RET



    ;--------------
PrintText:	
	LD HL, 0x401b              ; screen address (0x4000-1)
	LD (ScreenAddr), HL
	LD BC, Text
TextLoop:	
	LD A, (BC)
	OR A
	RET Z                      ; return if symobol is zero
	INC BC                     ; step to next symbol
	
	LD H, 0                    ; ld hl, a
	LD L, A

	ADD HL, HL                 ; hl2 = hl + hl
	ADD HL, HL                 ; hl4 = hl2 + hl2
	ADD HL, HL                 ; hl8 = hl8 + hl8
	
	LD DE, Font                ; start of font
	ADD HL, DE                 ; a specific letter

    LD DE, (ScreenAddr)              ; screen address
	INC DE                           ; next pos
	LD (ScreenAddr), DE

	LD A, (HL)                 ; load 8 pix
	LD (DE), A                 ; store 8 pix

	INC D				; next line - inc DE, 256
	INC HL               ;             inc hl, 1
	LD A, (HL)
	LD (DE), A

	INC D				; next line - inc DE, 256
	INC HL               ;             inc hl, 1
	LD A, (HL)
	LD (DE), A

	INC D				; next line - inc DE, 256
	INC HL               ;             inc hl, 1
	LD A, (HL)
	LD (DE), A

	INC D				; next line - inc DE, 256
	INC HL               ;             inc hl, 1
	LD A, (HL)
	LD (DE), A

	INC D				; next line - inc DE, 256
	INC HL               ;             inc hl, 1
	LD A, (HL)
	LD (DE), A

	INC D				; next line - inc DE, 256
	INC HL               ;             inc hl, 1
	LD A, (HL)
	LD (DE), A

	INC D				; next line - inc DE, 256
	INC HL               ;             inc hl, 1
	LD A, (HL)
	LD (DE), A

	JR TextLoop
    RET                                     ; And return

Text:
    DB "TEST"
	DB 0

ScreenAddr:
	DB 0, 0	

Font:
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255
	DB 255,255,255,255,255,255,255,255

	DB 0,0,0,0,0,0,0,0 ;32 = space
	DB 0,16,16,16,16,0,16,0
	DB 0,36,36,0,0,0,0,0
	DB 0,36,126,36,36,126,36,0
	DB 0,8,62,40,62,10,62,8
	DB 0,98,100,8,16,38,70,0
	DB 0,16,40,16,42,68,58,0
	DB 0,8,16,0,0,0,0,0
	DB 0,4,8,8,8,8,4,0
	DB 0,32,16,16,16,16,32,0
	DB 0,0,20,8,62,8,20,0
	DB 0,0,8,8,62,8,8,0
	DB 0,0,0,0,0,8,8,16
	DB 0,0,0,0,62,0,0,0
	DB 0,0,0,0,0,24,24,0
	DB 0,0,2,4,8,16,32,0
	DB 0,60,70,74,82,98,60,0
	DB 0,24,40,8,8,8,62,0
	DB 0,60,66,2,60,64,126,0
	DB 0,60,66,12,2,66,60,0
	DB 0,8,24,40,72,126,8,0
	DB 0,126,64,124,2,66,60,0
	DB 0,60,64,124,66,66,60,0
	DB 0,126,2,4,8,16,16,0
	DB 0,60,66,60,66,66,60,0
	DB 0,60,66,66,62,2,60,0
	DB 0,0,0,16,0,0,16,0
	DB 0,0,16,0,0,16,16,32
	DB 0,0,4,8,16,8,4,0
	DB 0,0,0,62,0,62,0,0
	DB 0,0,16,8,4,8,16,0
	DB 0,60,66,4,8,0,8,0
	DB 0,60,74,86,94,64,60,0
	DB 0,60,66,66,126,66,66,0
	DB 0,124,66,124,66,66,124,0
	DB 0,60,66,64,64,66,60,0
	DB 0,120,68,66,66,68,120,0
	DB 0,126,64,124,64,64,126,0
	DB 0,126,64,124,64,64,64,0
	DB 0,60,66,64,78,66,60,0
	DB 0,66,66,126,66,66,66,0
	DB 0,62,8,8,8,8,62,0
	DB 0,2,2,2,66,66,60,0
	DB 0,68,72,112,72,68,66,0
	DB 0,64,64,64,64,64,126,0
	DB 0,66,102,90,66,66,66,0
	DB 0,66,98,82,74,70,66,0
	DB 0,60,66,66,66,66,60,0
	DB 0,124,66,66,124,64,64,0
	DB 0,60,66,66,82,74,60,0
	DB 0,124,66,66,124,68,66,0
	DB 0,60,64,60,2,66,60,0
	DB 0,254,16,16,16,16,16,0
	DB 0,66,66,66,66,66,60,0
	DB 0,66,66,66,66,36,24,0
	DB 0,66,66,66,66,90,36,0
	DB 0,66,36,24,24,36,66,0
	DB 0,130,68,40,16,16,16,0
	DB 0,126,4,8,16,32,126,0
	DB 0,14,8,8,8,8,14,0
	DB 0,0,64,32,16,8,4,0
	DB 0,112,16,16,16,16,112,0
	DB 0,16,56,84,16,16,16,0
	DB 0,0,0,0,0,0,0,255
	DB 0,28,34,120,32,32,126,0
	DB 0,0,56,4,60,68,60,0
	DB 0,32,32,60,34,34,60,0
	DB 0,0,28,32,32,32,28,0
	DB 0,4,4,60,68,68,60,0
	DB 0,0,56,68,120,64,60,0
	DB 0,12,16,24,16,16,16,0
	DB 0,0,60,68,68,60,4,56
	DB 0,64,64,120,68,68,68,0
	DB 0,16,0,48,16,16,56,0
	DB 0,4,0,4,4,4,36,24
	DB 0,32,40,48,48,40,36,0
	DB 0,16,16,16,16,16,12,0
	DB 0,0,104,84,84,84,84,0
	DB 0,0,120,68,68,68,68,0
	DB 0,0,56,68,68,68,56,0
	DB 0,0,120,68,68,120,64,64
	DB 0,0,60,68,68,60,4,6
	DB 0,0,28,32,32,32,32,0
	DB 0,0,56,64,56,4,120,0
	DB 0,16,56,16,16,16,12,0
	DB 0,0,68,68,68,68,56,0
	DB 0,0,68,68,40,40,16,0
	DB 0,0,68,84,84,84,40,0
	DB 0,0,68,40,16,40,68,0
	DB 0,0,68,68,68,60,4,56
	DB 0,0,124,8,16,32,124,0
	DB 0,14,8,48,8,8,14,0
	DB 0,8,8,8,8,8,8,0
	DB 0,112,16,12,16,16,112,0
	DB 0,20,40,0,0,0,0,0
	DB 60,66,153,161,161,153,66,60



Code_Length: EQU $-Code_Start+1

    SAVESNA "scroll/scroll.sna", Code_Start
